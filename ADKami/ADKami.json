{
  "moduleInfo": {
    "moduleName": "ADKami",
    "moduleInitials": "ADK",
    "moduleDesc": "Ketsu module for ADKami website",
    "developer": "Frizrat",
    "moduleID": "22382108",
    "moduleImage": "https://i.postimg.cc/4yX1tdVM/ADKami-Logo.png",
    "moduleVersion": 1.0,
    "changelog": "",
    "moduleLenguage": "FR",
    "moduleType": "Video",
    "baseURL": "https://www.adkami.com",
    "moduleDeveloperSite": "https://bilnaa.github.io/main/index",
    "UpdateSite": "https://raw.githubusercontent.com/Bilnaa/bilnaa.github.io/main/ADKami/ADKami.json",
    "preferedServer": "",
    "preferedDownloadServer": "",
    "blackListed": [ "" ]
  },
  "global": {
    "variables": [ {
      "key": "",
      "value": ""
    } ],
    "cookies": [ {
      "key": "",
      "value": ""
    } ],
    "headers": [ {
      "key": "",
      "value": ""
    } ]
  },
  "mainPage": [
    {
      "request": {
        "url": "https://www.adkami.com",
        "method": "get",
        "headers": [ {
          "key": "",
          "value": ""
        } ],
        "httpBody": null
      },
      "extra": {
        "commands": [{
          "commandName": "",
          "params": [ {
            "key": "",
            "value": ""
          } ]
        } ],
        "extraInfo": [ {
          "key": "",
          "value": ""
        } ]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: ''}; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' };const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;} function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;} var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML); const emptyKeyValue = [new KeyValue('','')]; var output = [];var searchArray = [];for (div of document.querySelectorAll('#indexpage > .col-12 > div')) { if (div.className.includes('list-days')) { if (searchArray.length != 0) { output.push(new Output(CellDesings.normal1,Orientation.horizontal,DefaultLayouts.doubletsDouble,Paging.leading, new Section(sectionName, true), null, searchArray)); } searchArray = []; var sectionName = div.textContent.trim(); continue; } else { var image = div.querySelector('img').getAttribute('data-original'); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = div.querySelector('.title').textContent; var genre = ''; try { genre = div.querySelector('.lecteur-icon').className.split(' ')[1] } catch {} var episode = div.querySelector('.episode').innerHTML.split('<')[0].replace('Episode', 'Ep').replace('saison ', 's'); var link = div.querySelectorAll('a')[1].href.split('/').slice(0, 5).join('/'); link = new ModuleRequest(link, 'get', emptyKeyValue, null); searchArray.push(new Data(image, title, '', episode, genre, '', '', false, link)); }}output.push(new Output(CellDesings.normal1,Orientation.horizontal,DefaultLayouts.doubletsDouble,Paging.leading, new Section(sectionName, true), null, searchArray)); const mainPageObject = new MainPage(new ModuleRequest('','get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output);savedData.innerHTML = JSON.stringify(mainPageObject);"
      },
      "output": [ {
        "cellDesing": "normal1",
        "orientation": "vertical",
        "defaultLayout": "wide",
        "paging": "",
        "section": {
          "sectionName": "",
          "separator": false
        },
        "layout": {
          "insets": {
            "top": 0,
            "bottom": 0,
            "left": 0,
            "right": 0
          },
          "visibleCellsWidthS": 2,
          "visibleCellsWidthM": 2,
          "visibleCellsWidthL": 2,
          "visibleCellsHeight": 2,
          "heightForVisibleCells": 400,
          "cellSize": {
            "width": 300,
            "height": 300
          },
          "ratio": {
            "inRelation": "width",
            "number1": 1,
            "number2": 2
          },
          "constant": {
            "width": 1,
            "height": 2
          },
          "horizontalSpacing": 0,
          "verticalSpacing": 0
        },
        "data": [ {
          "image": {
            "url": "",
            "method": "get",
            "headers": [ {
              "key": "",
              "value": ""
            } ],
            "httpBody": null
          },
          "title": "",
          "description": "",
          "field1": "",
          "field2": "",
          "field3": "",
          "field4": "",
          "openInWebView" : false,
          "isChapter": false,
          "link": {
            "url": "",
            "method": "",
            "headers": [ {
              "key": "",
              "value": ""
            } ],
            "httpBody": null
          }
        } ]
      } ]
    }
  ],
  "search": [
    {
      "request": {
        "url": "https://www.adkami.com/video?search=<searched>&page=<page>",
        "method": "get",
        "headers": [ {
          "key": "",
          "value": ""
        } ],
        "httpBody": null
      },
      "separator": "+",
      "extra": {
        "commands": [ {
          "commandName": "",
          "params": [ {
            "key": "",
            "value": ""
          } ]
        } ],
        "extraInfo": [ {
          "key": "",
          "value": ""
        } ]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: ''}; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11'}; const Paging = { leading : 'leading', centered : 'centered', none : '' };const Orientation = { horizontal : 'horizontal', vertical : 'vertical' };function Search(request,extra,separator,javascriptConfig,output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url,method,headers,httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands,extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName,params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript,loadInWebView,javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key,value) { this.key = key; this.value = value;}function Output(cellDesing,orientation,defaultLayout,paging,section,layout,data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName,separator) { this.sectionName = sectionName; this.separator = separator;}function Data(image,title,description,field1,field2,field3,field4,isChapter,link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;} function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top,bottom,left,right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width,height) { this.width = width; this.height = height;}function Ratio(inRelation,number1,number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML); const emptyKeyValue = [new KeyValue('','')];var output = [];var searchArray = [];for (div of document.querySelectorAll('.col-12.bloc')[1].querySelectorAll('.col-12 > div')) { if (div.className.includes('list-days')) { if (searchArray.length != 0) { output.push(new Output(CellDesings.normal1,Orientation.horizontal,DefaultLayouts.doubletsDouble,Paging.leading, new Section(sectionName, true), null, searchArray)); } searchArray = []; var sectionName = div.textContent.trim(); continue; } else if (div.className.includes('video')) { var image = div.querySelector('img').getAttribute('data-original'); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = div.querySelector('.title').textContent; var genre = div.querySelectorAll('span')[1].title; var episode = div.querySelector('.episode').textContent.replace('nombre d\\'épisode', 'Ep'); var link = div.querySelectorAll('a')[1].href.replace('www.', '').split('/').slice(0, 5).join('/'); link = new ModuleRequest(link, 'get', emptyKeyValue, null); searchArray.push(new Data(image, title, '', episode, genre, '', '', false, link)); }}output.push(new Output(CellDesings.normal1,Orientation.vertical,DefaultLayouts.doubletsFullDouble,Paging.leading, new Section('', true), null, searchArray));const searchPageObject = new Search(new ModuleRequest('','',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),'',new JavascriptConfig(true,false,''),output);savedData.innerHTML = JSON.stringify(searchPageObject);"
      },
      "output": [ {
        "cellDesing": "normal1",
        "orientation": "vertical",
        "defaultLayout": "wide",
        "paging": "",
        "section": {
          "sectionName": "",
          "separator": false
        },
        "layout": {
          "insets": {
            "top": 0,
            "bottom": 0,
            "left": 0,
            "right": 0
          },
          "visibleCellsWidthS": 2,
          "visibleCellsWidthM": 2,
          "visibleCellsWidthL": 2,
          "visibleCellsHeight": 2,
          "heightForVisibleCells": 400,
          "cellSize": {
            "width": 300,
            "height": 300
          },
          "ratio": {
            "inRelation": "width",
            "number1": 1,
            "number2": 2
          },
          "constant": {
            "width": 1,
            "height": 2
          },
          "horizontalSpacing": 0,
          "verticalSpacing": 0
        },
        "data": [ {
          "image": {
            "url": "",
            "method": "get",
            "headers": [ {
              "key": "",
              "value": ""
            } ],
            "httpBody": null
          },
          "title": "",
          "description": "",
          "field1": "",
          "field2": "",
          "field3": "",
          "field4": "",
          "openInWebView" : false,
          "isChapter": false,
          "link": {
            "url": "empty",
            "method": "get",
            "headers": [ {
              "key": "key",
              "value": "value"
            } ],
            "httpBody": null
          }
        } ]
      } ]
    }
  ],
  "info": [
    {
      "request": {
        "url": "",
        "method": "get",
        "headers": [ {
          "key": "",
          "value": ""
        } ],
        "httpBody": null
      },
      "extra": {
        "commands": [ {
          "commandName": "",
          "params": [ {
            "key": "",
            "value": ""
          } ]
        } ],
        "extraInfo": [ {
          "key": "",
          "value": ""
        } ]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Chapter(chapName, link,openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView;}function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters;}var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML);const emptyKeyValue = [new KeyValue('', '')];var image = document.querySelector('.col-12.m-hidden').src;image = new ModuleRequest(image,'get',emptyKeyValue,null);var title = document.querySelectorAll('[itemprop=\"name\"]')[1].textContent;var desc = document.querySelector('.depion').textContent.trim();var genres = Array.from(document.querySelectorAll('.info [itemprop=\"genre\"]')).map(genre => genre.textContent);const infos = document.querySelectorAll('.anime-information-icon > span');var statut = infos[2].title;var type = infos[1].title;var episodes = [];var eps = {};var seasons = document.querySelectorAll('.saison-container');const isSeason0 = seasons.length < 1;if (isSeason0) { seasons = document.querySelectorAll('#nav-episode ul'); }for (let season of seasons) { if (season.querySelectorAll('ul').length > 1 || isSeason0) { var seasonName = season.querySelector('.saison').textContent; for (let epi of season.querySelectorAll('a')) { var lang = epi.textContent.split(' ').slice(-1); var ep = new Chapter(`${epi.textContent} ${seasonName}`, new ModuleRequest(epi.href.replace('www.', ''), 'get', emptyKeyValue, null), false); try { eps[lang].push(ep); continue; } catch {} eps[lang] = [ep]; } }}for (lang in eps) { episodes.push.apply(episodes, eps[lang]); }const infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(image, title, parsedJson.request, desc, genres, statut, type, 'Vers:' + Object.keys(eps).length, 'Eps: '+ episodes.length, episodes));savedData.innerHTML = JSON.stringify(infoPageObject);"
      },
      "output": {
        "image": {
          "url": "",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        },
        "link": {
          "url": "",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "genres": [ "" ],
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "chapters": [ {
          "chapName": "",
          "openInWebView": false,
          "link": {
            "url": "empty",
            "method": "get",
            "headers": [ {
              "key": "",
              "value": ""
            } ],
            "httpBody": null
          }
        } ]
      }
    }
  ],
  "chapters": [
    {
      "request": {
        "url": "",
        "method": "get",
        "headers": [ {
          "key": "",
          "value": ""
        } ],
        "httpBody": null
      },
      "extra": {
        "commands": [ {
          "commandName": "",
          "params": [ {
            "key": "",
            "value": ""
          } ]
        } ],
        "extraInfo": [ {
          "key": "",
          "value": ""
        } ]
      },
      "javascriptConfig": {
        "removeJavascript": false,
        "loadInWebView": true,
        "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text;} function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;} var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML);const emptyKeyValue = [new KeyValue('', '')];var output = [];for (embed of document.querySelectorAll('.protected-info')) { embed.click() }for (iframe of document.querySelectorAll('iframe')) { output.push(new NeedsResolver('', new ModuleRequest(iframe.src.replace('tape.com', 'ta.pe'), 'get', emptyKeyValue, null)));}for (redirection of document.querySelectorAll('.lecteur-redirection')) { output.push(new NeedsResolver('', new ModuleRequest(redirection.href, 'get', emptyKeyValue, null)));}const emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);const chaptersPageObject = new Chapters(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output( new Videos(output, null), null, null));savedData.innerHTML = JSON.stringify(chaptersPageObject);"
      },
      "output": {
        "videos": {
          "needsResolver": [ {
            "resolverIdentifier": "",
            "link": {
              "url": "",
              "method": "get",
              "headers": [ {
                "key": "",
                "value": ""
              } ],
              "httpBody": null
            }
          } ],
          "rawVideo": [ {
            "video": [ {
              "videoQuality": "",
              "videoLink": {
                "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                "method": "get",
                "headers": [ {
                  "key": "",
                  "value": ""
                } ],
                "httpBody": null
              }
            } ]
          } ]
        },
        "images": [ {
          "url": "empty",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        } ],
        "text": { "text": "" }
      }
    }
  ],
  "moduleResolvers": [
    {
      "resolverInfo": {
        "resolverName": "STREAMTA",
        "nameMatches": [ "STREAMTA" ],
        "developer": "ナビル",
        "moduleID": "8465132120",
        "resolverVersion": 1.6,
        "baseURL": ""
      },
      "resolver": [ {
        "request": {
          "url": "empty",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        },
        "extra": {
          "commands": [ {
            "commandName": "",
            "params": [ {
              "key": "",
              "value": ""
            } ]
          } ],
          "extraInfo": [ {
            "key": "",
            "value": ""
          } ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": "function Resolver(request, extra, javascriptConfig, output) {this.request = request;this.extra = extra;this.javascriptConfig = javascriptConfig;this.output = output;}function ModuleRequest(url, method, headers, httpBody) {this.url = url;this.method = method;this.headers = headers;this.httpBody = httpBody;}function Extra(commands, extraInfo) {this.commands = commands;this.extraInfo = extraInfo;}function Commands(commandName, params) {this.commandName = commandName;this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) {this.removeJavascript = removeJavascript;this.loadInWebView = loadInWebView;this.javaScript = javaScript;}function KeyValue(key, value) {this.key = key;this.value = value;}function Output(video) {this.video = video;}function Video(videoQuality, videoLink) {this.videoQuality = videoQuality;this.videoLink = videoLink;}function getNext(match, array) {for(var x = 0; x < array.length; x++) {let mMatch = array[x];if(mMatch.includes(match)) {return array[x + 1];}}}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var videos = [];let playerRegex = /innerHTML\\s=\\s*\"([^\"]+)\"\\s?\\+\\s?''\\+\\s?\\('([^']+)/;let body = document.body.innerText;let playerMatch = playerRegex.exec(body);if (playerMatch) { let matchedLink = playerMatch[2]; let index = matchedLink.indexOf('?');if (index == -1){try{firstpart = playerMatch[1].split('=')[1].replace('\"','');secondpart = playerMatch[2].substr(5);secondtry = playerMatch[2].substr(4);let videoLink = 'https://streamta.pe/get_video?id=' + firstpart + secondpart + '&stream=1';let fixedLink = 'https://streamta.pe/get_video?id=' + firstpart + secondtry + '&stream=1';console.log(videoLink,fixedLink);videos.push(new Video('THAI GUY WAS HERE', new ModuleRequest(fixedLink, 'get', emptyKeyValue, null)));videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}catch(e){}try{if (matchedLink.match(/^=/)){let videoLink = 'https://streamta.pe/get_video?id=' + matchedLink.substr(5) + '&stream=1';if (videoLink.includes('id==')) {videoLink = videoLink.replace('id==', 'id='); }console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}catch(e){}try{ if(matchedLink.match(/id=/)) { split = matchedLink.split('id='); let videoLink = 'https://streamta.pe/get_video?id=' + split[1] + '&stream=1'; console.log(videoLink); videos.push(new Video('Normal', new ModuleRequest(videoLink, 'get', emptyKeyValue, null))); } }catch(e){}try{if (matchedLink.match(/^([a-zA-Z]+d=)/)){split = matchedLink.split('d=');let videoLink = 'https://streamta.pe/get_video?id=' + split[1] + '&stream=1';console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}catch(e){}}else{let videoLink = `https://streamta.pe/get_video${matchedLink.substr(index)}&stream=1`;console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
          "moduleID": "234234823",
          "video": [ {
            "videoQuality": "720",
            "videoLink": {
              "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
              "method": "get",
              "headers": [ {
                "key": "",
                "value": ""
              } ],
              "httpBody": null
            }
          } ]
        }
      } ]
    }
  ],
  "responseCodeFunctions": [
    {
      "code": 0,
      "msgTitle": "",
      "msgBody": "",
      "type": "normal",
      "functions": [ {
        "request": {
          "url": "empty",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        },
        "extra": {
          "commands": [ {
            "commandName": "",
            "params": [ {
              "key": "",
              "value": ""
            } ]
          } ],
          "extraInfo": [ {
            "key": "",
            "value": ""
          } ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": ""
        }
      } ]
    }
  ],
  "helperFunctions": [
    {
      "functionName": "example",
      "msgTitle": "",
      "msgBody": "",
      "type": "normal",
      "functions": [ {
        "request": {
          "url": "empty",
          "method": "get",
          "headers": [ {
            "key": "",
            "value": ""
          } ],
          "httpBody": null
        },
        "extra": {
          "commands": [ {
            "commandName": "",
            "params": [ {
              "key": "",
              "value": ""
            } ]
          } ],
          "extraInfo": [ {
            "key": "",
            "value": ""
          } ]
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": ""
        }
      } ]
    }
  ]
}