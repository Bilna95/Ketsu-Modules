{
    "moduleName": "Zoro",
    "moduleInitials": "ZR",
    "moduleDesc": "Zoro module for Katsu",
    "developer": "ナビル",
    "moduleID": "114653268923213246",
    "moduleImage": "https://i.postimg.cc/jSP7Srhr/zoro-gif.gif",
    "moduleVersion": "1.11",
    "moduleLenguage": "ENG",
    "moduleHasVideos": "true",
    "randomizeUserAgent": "false",
    "baseURL": "https://zoro.to/",
    "mainPageLeftTitle": "Last Episodes (doesn't work)",
    "mainPageRightTitle": "Most Viewed Animes",
    "blackListed": [""],
    "mainPage": [{
        "request": "https://zoro.to/home",
        "method": "get",
        "headers": [{
            "key": "",
            "value": ""
        }],
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key, value){ this.key = key; this.value = value;} function ExtraInfo(value){ this.value = value;} function Output(lastEpisodes, lastAnimes){ this.lastEpisodes = lastEpisodes; this.lastAnimes = lastAnimes;} function LastAnimes(moduleID, image, link, title){ this.moduleID = moduleID; this.image = image; this.link = link; this.title = title;} function LastEpisodes(moduleID, image, link, title, episode){ this.moduleID = moduleID; this.image = image; this.link = link; this.title = title; this.episode = episode;} function MainPageObject(request, headers, method, extraInfo, loadJavascript, javaScript, output){ this.request = request; this.headers = headers; this.method = method; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output;} var savedData = document.getElementById('katsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var moduleID = '114653268923213246'; var headers = [new Header('X-Requested-With', 'XMLHttpRequest')]; var extraInfo = [new ExtraInfo('')]; var mainPageObject; var output; var lastAnimes = []; var lastEpisodes = []; var last = document.querySelectorAll( '#main-content > section:nth-child(2) > div.tab-content > div > div.film_list-wrap div.flw-item'); for (list of last){ let title = list.querySelector('img').alt; var link = 'https://zoro.to/' + list.querySelector('.film-name a').href; var image = list.querySelector('img').getAttribute('data-src'); var ep = '??'; try{ ep = list.querySelector('.tick.rtl').textContent.trim().replace('Ep', '').replaceAll(' ', '');} catch (e){ ep = list.querySelector('.tick.rtl'); if (ep == null){ ep = '??';} else{ ep = list.querySelector('.tick.rtl').textContent.trim()}} var language = '??'; try{ language = list.querySelector('.tick.ltr').textContent.replaceAll('\\n', '').trim().replace(' ', '/') .replaceAll(' ', '');} catch{ language = list.querySelector('.tick.ltr'); if (language == null){ language = '??';} else{ language = list.querySelector('.tick.ltr').innerText.trim().replace('\\n', '/');}} if (list.querySelector('.fdi-item').innerText.includes('Special')){ ep = 'Special'; language = '';} lastEpisodes.push(new LastEpisodes(moduleID, image, link, title + ' ' + language, ep));} var mostviewed = document.querySelectorAll('#top-viewed-week > ul > li'); for (list of mostviewed){ let title = list.querySelector('img').alt; var link = 'https://zoro.to/' + list.querySelector('a').href; var image = list.querySelector('img').getAttribute('data-src'); var views = '??'; try{ views = list.querySelector('.fdi-item').textContent.trim();} catch{ views = list.querySelector('.fdi-item');} if (views == null){ views = '??';} lastAnimes.push(new LastEpisodes(moduleID, image, link, title + ' ' + language, ''));} while (lastEpisodes.length % 2 != 0){ lastEpisodes.push(lastEpisodes[0]);} while (lastAnimes.length % 3 != 0){ lastAnimes.push(lastAnimes[0]);} output = new Output(lastEpisodes, lastAnimes); mainPageObject = new MainPageObject('', headers, '', extraInfo, '', '', output); var finalJson = JSON.stringify(mainPageObject); savedData.innerHTML = finalJson;",
        "output": {
            "lastEpisodes": [{
                "moduleID": "0",
                "image": "",
                "link": "",
                "title": "",
                "episode": ""
            }],
            "lastAnimes": [{
                "moduleID": "0",
                "image": "",
                "link": "",
                "title": ""
            }]
        }
    }],
    "search": [{
        "request": "https://zoro.to/search?&keyword=<searched>&page=<page>",
        "method": "get",
        "headers": [{
            "key": "",
            "value": ""
        }],
        "separator": "%20",
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key, value){ this.key = key; this.value = value;} function ExtraInfo(value){ this.value = value;} function Output(moduleID, image, link, title, type, voice, stars){ this.moduleID = moduleID; this.image = image; this.link = link; this.title = title; this.type = type; this.voice = voice; this.stars = stars;} function SearchObject(request, method, headers, separator, extraInfo, loadJavascript, javaScript, output){ this.request = request; this.method = method; this.headers = headers; this.separator = separator; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output;} var savedData = document.getElementById('katsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var moduleID = '114653268923213246'; var headers = [new Header('X-Requested-With', 'XMLHttpRequest')]; var extraInfo = [new ExtraInfo('')]; var searchPageObject; var output = []; var type='Anime'; var shorts = document.querySelectorAll('.film_list-wrap .flw-item'); for (short of shorts){ try{ language = short.querySelector('.tick.ltr').textContent.replaceAll('\\n', '').trim().replace(' ', '/') .replaceAll(' ', '');} catch{ language = short.querySelector('.tick.ltr'); if (language == null){ language = '??';} else{ language = short.querySelector('.tick.ltr').innerText.trim().replace('\\n', '/');}} var image = short.querySelector('img').getAttribute('data-src'); var field1 = short.querySelector('.tick-item.tick-eps').textContent.trim(); var link = 'https://zoro.to' + short.querySelector('a').getAttribute('href'); var title = short.querySelector('img').alt; output.push(new Output(moduleID, image, link, title, type, language, field1));} searchPageObject = new SearchObject('', '', headers, '+', extraInfo, '', '', output); var finalJson = JSON.stringify(searchPageObject); savedData.innerHTML = finalJson;",
        "output": [{
            "moduleID": "0",
            "image": "",
            "link": "",
            "title": "",
            "type": "",
            "voice": "",
            "stars": ""
        }]
    }],
    "info": [{
        "request": "this Can be empty",
        "method": "get",
        "headers": [{
            "key": "",
            "value": ""
        }],
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key,value){ this.key = key; this.value = value}function ExtraInfo(value){ this.value = value}function Output(moduleID,image,link,title,description,genres,type,status,episodes){ this.moduleID = moduleID; this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.type = type; this.status = status; this.episodes = episodes}function Episodes(link,moduleID,isDecodable){ this.link = link; this.moduleID = moduleID; this.isDecodable = isDecodable}function InfoObject(request,method,headers,extraInfo,loadJavascript,javaScript,output){ this.request = request; this.method = method; this.headers = headers; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output}var savedData = document.getElementById('katsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML); var moduleID = 'UAFR';var headers = [new Header('X-Requested-With', 'XMLHttpRequest')];var extraInfo = [new ExtraInfo('')];var infoObject; var output;var episodes = [];var type = 'Anime';var animeinfo = document.querySelector('div.anisc-info-wrap > div.anisc-info');for (var x = 0; x < animeinfo.children.length; x++){ if (animeinfo.children[x].textContent.trim().includes('Status')){ var status = animeinfo.children[x].textContent.split('Status:')[1].trim();} else if (animeinfo.children[x].textContent.trim().includes('Aired')){ var airing = animeinfo.children[x].textContent.split('Aired:')[1].trim();}}var genres = Array.from(document.querySelectorAll('.item.item-list a')).map(g => g.textContent);var desc = '';try{ desc = document.querySelector('div.anis-content > div.anisc-detail > div.film-depion.m-hide > div').textContent.trim()} catch (e){ desc = document.querySelector('.anisc-info').textContent.trim()}var image = document.querySelector('.film-poster img').src;if (document.querySelector('.anisc-detail h2').textContent != document.querySelector('.anisc-detail h2').dataset.jname){ var title = document.querySelector('.anisc-detail h2').textContent + '/' + document.querySelector('.anisc-detail h2').dataset.jname} else{ var title = document.querySelector('.anisc-detail h2').dataset.jname};console.log(moduleID,image,parsedJson.request,title,desc,genres,type,animeinfo.toString(),episodes);output = new Output(moduleID,image,parsedJson.request,title,desc,genres,airing,status,episodes);var json = document.querySelector('#wrapper').dataset.id;var nextRequest = `https://zoro.to/ajax/v2/episode/list/${json}`;infoObject = new InfoObject(nextRequest,'get',headers,extraInfo,'', '',output); var finalJson = JSON.stringify(infoObject);savedData.innerHTML = finalJson;",
        "output": {
            "moduleID": "0",
            "image": "",
            "link": "",
            "title": "",
            "description": "",
            "genres": [""],
            "type": "",
            "status": "",
            "episodes": [{
                "link": "",
                "moduleID": "",
                "isDecodable": "false"
            }]
        }
    }, {
        "request": "this Can be empty",
        "method": "get",
        "headers": [{
            "key": "",
            "value": ""
        }],
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key, value){ this.key = key; this.value = value;} function ExtraInfo(value){ this.value = value;} function Output(moduleID, image, link, title, description, genres, type, status, episodes){ this.moduleID = moduleID; this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.type = type; this.status = status; this.episodes = episodes;} function Episodes(link, moduleID, isDecodable){ this.link = link; this.moduleID = moduleID; this.isDecodable = isDecodable;} function InfoObject(request, method, headers, extraInfo, loadJavascript, javaScript, output){ this.request = request; this.method = method; this.headers = headers; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output;} var savedData = document.getElementById('katsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var moduleID = '114653268923213246'; var headers = [new Header('X-Requested-With', 'XMLHttpRequest')]; var extraInfo = [new ExtraInfo('')]; var infoObject; var output; var episodes = []; var type = parsedJson.output.type; var status = parsedJson.output.status; var image = parsedJson.output.image; var title = parsedJson.output.title; var desc = parsedJson.output.description; var genres = parsedJson.output.genres; var script = document.querySelector('script').innerText.replace('//', ''); var html = JSON.parse(script).html; var parser = new DOMParser(); var doc = parser.parseFromString(html, 'text/html'); var animes = doc.querySelectorAll('.ss-list a'); for (var x = 0; x < animes.length; x++){ var anime = animes[x]; var link = 'https://zoro.to/ajax/v2/episode/servers?episodeId=' + anime.dataset.id; episodes.push(new Episodes(link,moduleID,'false'));} parsedJson.request = parsedJson.output.link; output = new Output(moduleID, image, parsedJson.request, title, desc, genres, type, status, episodes); infoObject = new InfoObject('', 'get', headers, extraInfo, '', '', output); var finalJson = JSON.stringify(infoObject); savedData.innerHTML = finalJson;",
        "output": {
            "moduleID": "0",
            "image": "",
            "link": "",
            "title": "",
            "description": "",
            "genres": [""],
            "type": "",
            "status": "",
            "episodes": [{
                "link": "",
                "moduleID": "",
                "isDecodable": "false"
            }]
        }
    }],
    "episodes": [{
        "request": "This can be Empty",
        "method": "get",
        "headers": [{
            "key": "X-Requested-With",
            "value": "XMLHttpRequest"
        }],
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key,value){ this.key = key; this.value = value}function ExtraInfo(value){ this.value = value}function Output(link,linkIdentifier,moduleID,isDecodable,headers){ this.link = link; this.linkIdentifier = linkIdentifier; this.moduleID = moduleID; this.isDecodable = isDecodable; this.headers = headers}function EpisodeObject(request,method,headers,extraInfo,loadJavascript,javaScript,output){ this.request = request; this.method = method; this.headers = headers; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output}var savedData = document.getElementById('katsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML); var moduleID = '114653268923213246';var headers = [new Header('X-Requested-With', 'XMLHttpRequest')]; var episodeObject; var output = [];const script = document.querySelector('script').innerHTML.replace('//','');const data = JSON.parse(script);const html = data.html;const htmlObject = document.createElement('div');htmlObject.innerHTML = html;document.body.appendChild(htmlObject);var extraInfo = [new ExtraInfo('0')];var links = document.querySelectorAll('.item.server-item');for (var x = 0; x < links.length; x++){ var link = links[x]; var id = link.dataset.id; var lang = link.dataset.type; var url = 'https://zoro.to/ajax/v2/episode/sources?id=' + id + '?lang=' + lang; if (x == 0){ var nextRequest = url} else{ extraInfo.push(new ExtraInfo(`${url}`));} console.log(url)}episodeObject = new EpisodeObject(nextRequest,'get',headers,extraInfo,'','',output);var finalJson = JSON.stringify(episodeObject);savedData.innerHTML = finalJson;",
        "output": [{
            "link": "",
            "moduleID": "",
            "linkIdentifier": "",
            "isDecodable": "false",
            "headers": [{
                "key": "key",
                "value": "value"
            }]
        }]
    }, {
        "request": "This can be Empty",
        "method": "get",
        "headers": [{
            "key": "",
            "value": ""
        }],
        "extraInfo": [{
            "value": ""
        }],
        "loadJavascript": "false",
        "javaScript": "function Header(key, value){ this.key = key; this.value = value}function ExtraInfo(value){ this.value = value}function Output(link, linkIdentifier, moduleID, isDecodable, headers){ this.link = link; this.linkIdentifier = linkIdentifier; this.moduleID = moduleID; this.isDecodable = isDecodable; this.headers = headers}function EpisodeObject(request, method, headers, extraInfo, loadJavascript, javaScript, output){ this.request = request; this.method = method; this.headers = headers; this.extraInfo = extraInfo; this.loadJavascript = loadJavascript; this.javaScript = javaScript; this.output = output}var savedData = document.getElementById('katsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var moduleID = '114653268923213246';var headers = [new Header('X-Requested-With', 'XMLHttpRequest')];var episodeObject;var output = parsedJson.output;var extraInfo = parsedJson.extraInfo;const script = document.querySelector('script').innerHTML.replace('//', '');const data = JSON.parse(script);const link = data.link;var actualCount = extraInfo[0].value;var nextCount = parseInt(extraInfo[0].value) + 1;if (!link.includes('rapid-cloud')){ if (link.includes('streamtape.com')){ output.push(new Output(link.replace('https://streamtape.com/', 'https://streamta.pe/'), '', moduleID, 'false', headers));}else{ output.push(new Output(link, '', moduleID, 'false', headers));}}try{ var nextRequest = extraInfo[nextCount].value} catch (e){ var nextRequest = ''}extraInfo[0].value = '' + (parseInt(actualCount) + 1);episodeObject = new EpisodeObject(nextRequest, 'get', headers, extraInfo, '', '', output);var finalJson = JSON.stringify(episodeObject);savedData.innerHTML = finalJson;",
        "output": [{
            "link": "",
            "moduleID": "",
            "linkIdentifier": "",
            "isDecodable": "false",
            "headers": [{
                "key": "key",
                "value": "value"
            }]
        }]
    }]
 }
  
 