{
  "moduleInfo": {
    "moduleName": "Goojara",
    "moduleInitials": "GOO",
    "moduleDesc": "Watch movies and series for free with the module of Goojara.",
    "developer": "ナビル",
    "moduleID": "05616520316",
    "moduleImage": "https://i.postimg.cc/J4QpF9Xy/goojara-logo.png",
    "moduleVersion": 1.01,
    "changelog": "1.01 - For now every mixdrop link should work and if it doesn't the link is dead.",
    "moduleLenguage": "ENG",
    "moduleType": "Video",
    "baseURL": "https://www.goojara.to/",
    "moduleDeveloperSite": "https://bilnaa.github.io/main",
    "UpdateSite": "https://raw.githubusercontent.com/Bilnaa/bilnaa.github.io/main/Goojara.to/moduleTemplate.json",
    "preferedServer": "MIXDROP",
    "preferedDownloadServer": "MIXDROP",
    "blackListed": [
      ""
    ]
  },
  "global": {
    "variables": [{
      "key": "",
      "value": ""
    }],
    "cookies": [{
      "key": "",
      "value": ""
    }],
    "headers": [{
      "key": "",
      "value": ""
    }]
  },
  "mainPage": [{
    "request": {
      "url": "https://www.goojara.to/watch-movies",
      "method": "get",
      "headers": [{
        "key": "",
        "value": ""
      }],
      "httpBody": null
    },
    "extra": {
      "commands": [{
        "commandName": "",
        "params": [{
          "key": "",
          "value": ""
        }]
      }],
      "extraInfo": [{
        "key": "",
        "value": ""
      }]
    },
    "javascriptConfig": {
      "removeJavascript": true,
      "loadInWebView": false,
      "javaScript": " const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = []; let emptyKeyValue = [new KeyValue('','')]; var baseURL = 'https://www.goojara.to/'; var dataArray = []; films = document.querySelector('#xbrd > div.mxwd').querySelectorAll('div');; for(var x = 0; x < films.length; x++) { let list = films[x]; let title = list.querySelector('img').alt; var link =   list.querySelector('a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var image = 'https:' + list.querySelector('img').dataset.src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var finalData = new Data(image, title, 'unknown', '', 'unknown', 'unknown', 'unknown', false, link); dataArray.push(finalData); } output.push(new Output(CellDesings.normal2,Orientation.vertical,DefaultLayouts.longDoubletsFullConstant,Paging.leading, new Section('Movies', true), null, dataArray)); let MainPageObject = new MainPage(new ModuleRequest('','get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson; "
    },
    "output": [{
      "cellDesing": "normal1",
      "orientation": "vertical",
      "defaultLayout": "wide",
      "paging": "",
      "section": {
        "sectionName": "",
        "separator": false
      },
      "layout": {
        "insets": {
          "top": 0,
          "bottom": 0,
          "left": 0,
          "right": 0
        },
        "visibleCellsWidthS": 2,
        "visibleCellsWidthM": 2,
        "visibleCellsWidthL": 2,
        "visibleCellsHeight": 2,
        "heightForVisibleCells": 400,
        "cellSize": {
          "width": 300,
          "height": 300
        },
        "ratio": {
          "inRelation": "width",
          "number1": 1,
          "number2": 2
        },
        "constant": {
          "width": 1,
          "height": 2
        },
        "horizontalSpacing": 0,
        "verticalSpacing": 0
      },
      "data": [{
        "image": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "openInWebView": false,
        "isChapter": false,
        "link": {
          "url": "",
          "method": "",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        }
      }]
    }]
  }],
  "search": [{
    "request": {
      "url": "https://www.goojara.to/xhrr.php",
      "method": "POST",
      "headers": [{
        "key": "",
        "value": ""
      }],
      "httpBody": "q=<searched>"
    },
    "separator": "+",
    "extra": {
      "commands": [{
        "commandName": "",
        "params": [{
          "key": "",
          "value": ""
        }]
      }],
      "extraInfo": [{
        "key": "",
        "value": ""
      }]
    },
    "javascriptConfig": {
      "removeJavascript": true,
      "loadInWebView": false,
      "javaScript": "const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: ''};const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11'};const Paging = { leading: 'leading', centered: 'centered', none: ''};const Orientation = { horizontal: 'horizontal', vertical: 'vertical'};function Search(request, extra, separator, javascriptConfig, output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link);}function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let output = [];let emptyKeyValue = [new KeyValue('', '')];var testLayout = new Layout(new Insets(0, 0, 10, 10), 1, 2, 3, 6, 300, new Size(0, 0), null, new Size(0, 0), 0, 0);var searchArray = [];var baseURL = 'https://www.goojara.to/';var paramjs = document.querySelector('script').innerText.replace('*/', '').replace('/*', '');var parser = new DOMParser();var doc = parser.parseFromString(paramjs, 'text/html');var shorts = doc.querySelectorAll('.mfeed li');for (short of shorts) { var title = short.querySelector('.im,.it').textContent.trim(); var image = new ModuleRequest('', 'get', emptyKeyValue, null); var link =   short.querySelector('a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); searchArray.push(new Data(image, title, '', '', '', '', '', false, link));}output.push(new Output(CellDesings.small2, Orientation.vertical, DefaultLayouts.none, Paging.leading, new Section('', true), testLayout, searchArray));let searchPageObject = new Search(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), '', new JavascriptConfig(true, false, ''), output);var finalJson = JSON.stringify(searchPageObject);savedData.innerHTML = finalJson;"
    },
    "output": [{
      "cellDesing": "normal1",
      "orientation": "vertical",
      "defaultLayout": "wide",
      "paging": "",
      "section": {
        "sectionName": "",
        "separator": false
      },
      "layout": {
        "insets": {
          "top": 0,
          "bottom": 0,
          "left": 0,
          "right": 0
        },
        "visibleCellsWidthS": 2,
        "visibleCellsWidthM": 2,
        "visibleCellsWidthL": 2,
        "visibleCellsHeight": 2,
        "heightForVisibleCells": 400,
        "cellSize": {
          "width": 300,
          "height": 300
        },
        "ratio": {
          "inRelation": "width",
          "number1": 1,
          "number2": 2
        },
        "constant": {
          "width": 1,
          "height": 2
        },
        "horizontalSpacing": 0,
        "verticalSpacing": 0
      },
      "data": [{
        "image": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "openInWebView": false,
        "isChapter": false,
        "link": {
          "url": "empty",
          "method": "get",
          "headers": [{
            "key": "key",
            "value": "value"
          }],
          "httpBody": null
        }
      }]
    }]
  }],
  "info": [{
      "request": {
        "url": "",
        "method": "get",
        "headers": [{
          "key": "",
          "value": ""
        }],
        "httpBody": null
      },
      "extra": {
        "commands": [{
          "commandName": "",
          "params": [{
            "key": "",
            "value": ""
          }]
        }],
        "extraInfo": [{
          "key": "",
          "value": ""
        }]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": " function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Chapter(chapName, link, openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView; } function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters; } function getStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match, '').trim(); } } } function getHtmlStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } } } function getValueFromKey(keys, key) { for (var x = 0; x < keys.length; x++) { let tKey = keys[x]; if (tKey.key == key) { return tKey.value; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let emptyKeyValue = [new KeyValue('', '')]; var extraInfo = [new KeyValue('', '')]; var episodes = []; if (!document.querySelector('head> title').innerText.includes('Serie')) { var type = ''; var status = ''; var genres = []; var desc = document.querySelector('.fimm').innerText.trim(); var title = document.querySelector('#poster a img').alt; var image = 'https:' + document.querySelector('#poster a img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); let chapter = new Chapter(title, new ModuleRequest(parsedJson.request.url, 'get', emptyKeyValue, null), false); type = 'Film'; episodes.push(chapter); var newRequest = ''; } else { var newRequest = '';type = 'Serie'; var genres = []; try { genres = Array.from(document.querySelector('.date').innerText.split('|')[1].split(',')); } catch {} var desc = document.querySelector('.marl p').textContent.trim(); var title = document.querySelector('.imrl a img').alt; var image = document.querySelector('.imrl a img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var chapters = document.querySelectorAll('#seon .seho'); for (var i = 0; i < chapters.length; i++) { var element = chapters[i]; var fixedLink = 'https://goojara.to' + element.querySelector('h1 a').href; var episodeName = element.querySelector('div.seep').innerText.trim().replace('\\n', ' -') + ' - ' + element .querySelector('h1 a').innerText.trim(); let chapter = new Chapter(episodeName, new ModuleRequest(fixedLink, 'get', emptyKeyValue, null), false); episodes.push(chapter); } if (document.querySelectorAll('.dflex button').length > 2) { var extraInfo = [new KeyValue('count', '0')]; var seasons = document.querySelectorAll('.dflex button').length - 1; for (var x = seasons; x >= 1; x--) { if (x == seasons) { var newRequest = `${parsedJson.request.url + `?s=${x}`}`; } else { extraInfo.push(new KeyValue(`${x}`, `${parsedJson.request.url + `?s=${x}`}`)); } } } } let infoPageObject = new Info(new ModuleRequest(newRequest, 'get', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], extraInfo), new JavascriptConfig(true, false, ''), new Output(image, title, parsedJson .request, desc, genres, status, '', type, 'Eps: ' + episodes.length, episodes)); var finalJson = JSON.stringify(infoPageObject); savedData.innerHTML = finalJson;"
      },
      "output": {
        "image": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "link": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "genres": [
          ""
        ],
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "chapters": [{
          "chapName": "",
          "openInWebView": false,
          "link": {
            "url": "empty",
            "method": "get",
            "headers": [{
              "key": "key",
              "value": "value"
            }],
            "httpBody": null
          }
        }]
      }
    },
    {
      "request": {
        "url": "",
        "method": "get",
        "headers": [{
          "key": "",
          "value": ""
        }],
        "httpBody": null
      },
      "extra": {
        "commands": [{
          "commandName": "",
          "params": [{
            "key": "",
            "value": ""
          }]
        }],
        "extraInfo": [{
          "key": "",
          "value": ""
        }]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": " function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Chapter(chapName, link, openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView; } function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters; } function getStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match, '').trim(); } } } function getHtmlStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } } } function getValueFromKey(keys, key) { for (var x = 0; x < keys.length; x++) { let tKey = keys[x]; if (tKey.key == key) { return tKey.value; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let emptyKeyValue = [new KeyValue('', '')]; var episodes = []; type = 'Serie'; var image = parsedJson.output.image; var title = parsedJson.output.title; var desc = parsedJson.output.description; var genres = parsedJson.output.genres; var extraInfo = parsedJson.extra.extraInfo; var chapters = document.querySelectorAll('#seon .seho'); for (var i = 0; i < chapters.length; i++) { var element = chapters[i]; var fixedLink = 'https://goojara.to' + element.querySelector('h1 a').href; var episodeName = element.querySelector('div.seep').innerText.trim().replace('\\n', ' -') + ' - ' + element .querySelector('h1 a').innerText.trim(); let chapter = new Chapter(episodeName, new ModuleRequest(fixedLink, 'get', emptyKeyValue, null), false); parsedJson.output.chapters.push(chapter); } var actualCount = parseInt(extraInfo[0].value); try{ var nextRequest = extraInfo[parseInt(actualCount + 1)].value; }catch (error){ nextRequest = extraInfo[parseInt(actualCount)].value; } if (nextRequest == undefined) { nextRequest = ''; } extraInfo[0].value = '' + parseInt(actualCount + 1); let infoPageObject = new Info(new ModuleRequest(nextRequest, 'get', emptyKeyValue, null), new Extra([new Commands( '', emptyKeyValue)], extraInfo), new JavascriptConfig(true, false, ''), new Output(image, title, parsedJson.request, desc, genres, status, '', type, 'Eps: ' + parsedJson.output.chapters.length, parsedJson.output.chapters)); var finalJson = JSON.stringify(infoPageObject); savedData.innerHTML = finalJson;"
      },
      "output": {
        "image": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "link": {
          "url": "",
          "method": "get",
          "headers": [{
            "key": "",
            "value": ""
          }],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "genres": [
          ""
        ],
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "chapters": [{
          "chapName": "",
          "openInWebView": false,
          "link": {
            "url": "empty",
            "method": "get",
            "headers": [{
              "key": "key",
              "value": "value"
            }],
            "httpBody": null
          }
        }]
      }
    }
  ],
  "chapters": [{
    "request": {
      "url": "",
      "method": "get",
      "headers": [{
        "key": "key",
        "value": "value"
      }],
      "httpBody": null
    },
    "extra": {
      "commands": [{
        "commandName": "",
        "params": [{
          "key": "",
          "value": ""
        }]
      }],
      "extraInfo": [{
        "key": "",
        "value": ""
      }]
    },
    "javascriptConfig": {
      "removeJavascript": true,
      "loadInWebView": true,
      "javaScript": " function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(videos, images, text) { this.videos = videos; this.images = images; this.text = text; } function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo; } function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link; } function RawVideo(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function Text(text) { this.text = text; } var output = []; var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('', '')]; links = document.querySelectorAll('#drl a'); for (link of links) { var resolverId = link.innerText.replace('HDTV', '').replace('HDR','').replace(' ', '').toUpperCase(); output.push(new NeedsResolver(resolverId, new ModuleRequest(link.href, 'get', emptyKeyValue, null))); } let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Chapters(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(new Videos(output, null), null, null)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;"
    },
    "output": {
      "videos": {
        "needsResolver": [{
          "resolverIdentifier": "",
          "link": {
            "url": "",
            "method": "get",
            "headers": [{
              "key": "key",
              "value": "value"
            }],
            "httpBody": null
          }
        }],
        "rawVideo": [{
          "video": [{
            "videoQuality": "",
            "videoLink": {
              "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
              "method": "get",
              "headers": [{
                "key": "key",
                "value": "value"
              }],
              "httpBody": null
            }
          }]
        }]
      },
      "images": [{
        "url": "empty",
        "method": "get",
        "headers": [{
          "key": "key",
          "value": "value"
        }],
        "httpBody": null
      }],
      "text": {
        "text": ""
      }
    }
  }],
  "moduleResolvers": [{
    "resolverInfo": {
        "resolverName": "MIXDROP",
        "nameMatches": ["MIXDROP"],
        "developer": "ナビル",
        "moduleID": "358834582828881",
        "resolverVersion": 1.01,
        "baseURL": ""
    },
    "resolver": [{
        "request": {
            "url": "empty",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": false,
            "loadInWebView": false,
            "javaScript": "function Resolver(request, extra, javascriptConfig, output) {this.request = request;this.extra = extra;this.javascriptConfig = javascriptConfig;this.output = output;}function ModuleRequest(url, method, headers, httpBody) {this.url = url;this.method = method;this.headers = headers;this.httpBody = httpBody;}function Extra(commands, extraInfo) {this.commands = commands;this.extraInfo = extraInfo;}function Commands(commandName, params) {this.commandName = commandName;this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) {this.removeJavascript = removeJavascript;this.loadInWebView = loadInWebView;this.javaScript = javaScript;}function KeyValue(key, value) {this.key = key;this.value = value;}function Output(video) {this.video = video;}function Video(videoQuality, videoLink) {this.videoQuality = videoQuality;this.videoLink = videoLink;}function getNext(match, array) {for (var x = 0; x < array.length; x++) {let mMatch = array[x];if (mMatch.includes(match)) {return array[x + 1];}}}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var videos = [];try {var nextRequest = 'https:' + document.querySelector('textarea').textContent.split('src=\"')[1].split('\"')[0].replace('https://mixdrop.com/f/', 'https://mixdrop.com/e/');} catch (e) {var nextRequest = parsedJson.request.url;}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest(nextRequest, 'get', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
            "moduleID": "234234823",
            "video": [{
                "videoQuality": "720",
                "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    },
    {
        "request": {
            "url": "empty",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": false,
            "loadInWebView": false,
            "javaScript": "function Resolver(request,extra,javascriptConfig,output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url,method,headers,httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands,extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName,params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript,loadInWebView,javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key,value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality,videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getNext(match,array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } }}var MDCore = new function() { this.player = '', this.poster = '', this.vserver = '', this.vfile = '', this.wurl = '', this.suburl = ''; this.subs = false, this.remotesub = false, this.videoStarted = false, this.referrer = '', this.chromeInject = false, this.adblock = 1, this.logo = false, this.logopos = 0, this.blockAB = false, this.sublangs = {}; var d = ''; var c = 0;};let scripts = document.querySelectorAll('script');for (var x = 0; x < scripts.length; x++) { let scriptText = scripts[x].innerHTML; if (scriptText.includes('MDCore.ref')) { eval(scriptText); break; }} var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer',parsedJson.request.url)];var videos = [];videos.push(new Video('Normal',new ModuleRequest('https:' + MDCore.wurl,'get',emptyKeyValue,null)));let emptyExtra = new Extra([new Commands('',emptyKeyValue)],emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest('','',emptyKeyValue,null),emptyExtra,new JavascriptConfig(false,false,''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
            "moduleID": "234234823",
            "video": [{
                "videoQuality": "720",
                "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    }]
}],
  "responseCodeFunctions": [{
    "code": 0,
    "msgTitle": "",
    "msgBody": "",
    "type": "normal",
    "functions": [{
      "request": {
        "url": "empty",
        "method": "get",
        "headers": [{
          "key": "key",
          "value": "value"
        }],
        "httpBody": null
      },
      "extra": {
        "commands": [{
          "commandName": "",
          "params": [{
            "key": "",
            "value": ""
          }]
        }],
        "extraInfo": [{
          "key": "",
          "value": ""
        }]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": ""
      }
    }]
  }],
  "helperFunctions": [{
    "functionName": "example",
    "msgTitle": "",
    "msgBody": "",
    "type": "normal",
    "functions": [{
      "request": {
        "url": "empty",
        "method": "get",
        "headers": [{
          "key": "key",
          "value": "value"
        }],
        "httpBody": null
      },
      "extra": {
        "commands": [{
          "commandName": "",
          "params": [{
            "key": "",
            "value": ""
          }]
        }],
        "extraInfo": [{
          "key": "",
          "value": ""
        }]
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": ""
      }
    }]
  }]
}