{
  "moduleInfo": {
    "moduleName": "Streaming-Community",
    "moduleInitials": "SC",
    "moduleDesc": "Ketsu module for StreamingCommunity website",
    "developer": "Frizrat",
    "moduleID": "16271221",
    "moduleImage": "https://streamingcommunity.io/templates/streamingcommunity/images/logo.png",
    "moduleVersion": 1.2,
    "changelog": "Compatible with serie",
    "moduleLenguage": "ITA",
    "moduleType": "Video",
    "baseURL": "https://streamingcommunity.io/",
    "moduleDeveloperSite": "https://bilnaa.github.io/main",
    "UpdateSite": "https://raw.githubusercontent.com/Bilnaa/bilnaa.github.io/main/StreamingCommunity/StreamingCommunity.json",
    "preferedServer": "",
    "preferedDownloadServer": "",
    "blackListed": []
  },
  "global": {
    "variables": [],
    "cookies": [],
    "headers": []
  },
  "mainPage": [
    {
      "request": {
        "url": "https://streamingcommunity.io/",
        "method": "get",
        "headers": [],
        "httpBody": null
      },
      "extra": {
        "commands": [],
        "extraInfo": []
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: ''}; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' };const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML); const emptyKeyValue = [new KeyValue('','')];const filmSerie = { 'Film': { 'output': [], 'title': '.title-name > a', 'link': '.title-name > a', 'field1': '.title-desc > span:nth-child(2)', 'defaultLayouts': DefaultLayouts.doubletsDouble, 'newRequest': 'https://streamingcommunity.gratis/', }, 'Serie': { 'output': parsedJson.output, 'title': '.title-2', 'link': 'a', 'field1': '.enum', 'defaultLayouts': DefaultLayouts.longDoubletsDouble, 'newRequest': '', }}[parsedJson.request.url.includes('.io') ? 'Film':'Serie'];var output = filmSerie['output'];var sliders = document.querySelectorAll('.slider-title');for (let slider of sliders) { var dataArray = []; for (let el of slider.querySelectorAll('.slider-tile-inner')) { let img = parsedJson.request.url + el.querySelector('img').getAttribute('data-src').replace('/', ''); img = new ModuleRequest(img, 'get', emptyKeyValue, null); let title = el.querySelector(filmSerie['title']).textContent; let field1 = el.querySelector(filmSerie['field1']).textContent.trim(); let link = el.querySelector(filmSerie['link']).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); dataArray.push(new Data(img,title,'',field1,'','','',false,link)); } output.push(new Output(CellDesings.normal1, Orientation.horizontal, filmSerie['defaultLayouts'], Paging.leading, new Section(slider.querySelector('.row-title').textContent, true), null, dataArray));}const mainPageObject = new MainPage(new ModuleRequest(filmSerie['newRequest'],'get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output);savedData.innerHTML = JSON.stringify(mainPageObject);"
      },
      "output": []
    }
  ],
  "search": [
    {
      "request": {
        "url": "https://streamingcommunity.io/index.php?story=<searched>&do=search&subaction=search",
        "method": "get",
        "headers": [],
        "httpBody": null
      },
      "separator": "%20",
      "extra": {
        "commands": [],
        "extraInfo": []
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: ''}; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11'}; const Paging = { leading : 'leading', centered : 'centered', none : '' };const Orientation = { horizontal : 'horizontal', vertical : 'vertical' };function Search(request,extra,separator,javascriptConfig,output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url,method,headers,httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands,extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName,params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript,loadInWebView,javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key,value) { this.key = key; this.value = value;}function Output(cellDesing,orientation,defaultLayout,paging,section,layout,data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName,separator) { this.sectionName = sectionName; this.separator = separator;}function Data(image,title,description,field1,field2,field3,field4,isChapter,link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML); const emptyKeyValue = [new KeyValue('','')];const type = parsedJson.request.url.includes('.io') ? 'Film':'Serie';const filmSerie = { 'Film': { 'title': '.title-name > a', 'link': '.title-name > a', 'field1': '.title-desc > span:nth-child(2)', 'defaultLayouts': DefaultLayouts.doubletsFullDouble, }, 'Serie': { 'title': '.title-2', 'link': 'a', 'field1': '.enum', 'defaultLayouts': DefaultLayouts.longDoubletsFullDouble, }}[type];var output = parsedJson.output;var searchArray = [];var elements = document.querySelectorAll('.slider-tile');for (let el of elements) { var img = parsedJson.request.url.split('/index')[0] + el.querySelector('img').getAttribute('data-src'); img = new ModuleRequest(img, 'get', emptyKeyValue, null); let title = el.querySelector(filmSerie['title']).textContent.trim(); let field1 = el.querySelector(filmSerie['field1']).textContent.trim(); let link = el.querySelector(filmSerie['link']).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); searchArray.push(new Data(img,title,'',field1,'','','',false,link));}output.push(new Output(CellDesings.normal1,Orientation.vertical,filmSerie['defaultLayouts'],Paging.leading, new Section(type, true), null, searchArray));const searchPageObject = new Search(new ModuleRequest(parsedJson.request.url.replace('.io', '.gratis'),'get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),'%20',new JavascriptConfig(true,false,''), output);savedData.innerHTML = JSON.stringify(searchPageObject);"
      },
      "output": []
    }
  ],
  "info": [
    {
      "request": {
        "url": "",
        "method": "get",
        "headers": [],
        "httpBody": null
      },
      "extra": {
        "commands": [],
        "extraInfo": []
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Chapter(chapName, link,openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView;}function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters;}var savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML);const emptyKeyValue = [new KeyValue('', '')];const type = parsedJson.request.url.includes('.io') ? 'Film':'Serie';var img = parsedJson.request.url.split('/titles')[0].split('/serie')[0] + document.querySelector('.title-wrap').style.backgroundImage.split('\"')[1];img = new ModuleRequest(img,'get',emptyKeyValue,null);var title = document.querySelector('h1.title').textContent;var desc = document.querySelector('.plot').textContent.trim();var genres = document.querySelector('.category').textContent.trim().split(' ');var year = document.querySelector('.info-span > .desc').textContent.split(' -')[0].split(': ').slice(-1)[0];var time = document.querySelector('.info-span').querySelectorAll('.desc')[1].textContent.split(': ').slice(-1)[0];var episodes = [];if (type == 'Film') { var link = document.querySelector('.play-hitzone').href; episodes.push(new Chapter(title, new ModuleRequest(link, 'get', emptyKeyValue, null), false));} else { for (let ep of document.querySelectorAll('.slider-tile')) { episodes.push(new Chapter(ep.title, new ModuleRequest(`${parsedJson.request.url}?ep=${encodeURI(ep.title)}`, 'get', emptyKeyValue, null), false)); }}const infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(img, title, parsedJson.request, desc, genres, year, time, type, 'Eps: '+ episodes.length, episodes));savedData.innerHTML = JSON.stringify(infoPageObject);"
      },
      "output": {
        "image": {
          "url": "",
          "method": "get",
          "headers": [],
          "httpBody": null
        },
        "link": {
          "url": "",
          "method": "get",
          "headers": [],
          "httpBody": null
        },
        "title": "",
        "description": "",
        "genres": [],
        "field1": "",
        "field2": "",
        "field3": "",
        "field4": "",
        "chapters": []
      }
    }
  ],
  "chapters": [
    {
      "request": {
        "url": "",
        "method": "get",
        "headers": [],
        "httpBody": null
      },
      "extra": {
        "commands": [],
        "extraInfo": []
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text;} function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;} var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('', '')];var output = [];var nextRequest = '';if (parsedJson.request.url.includes('.io')) { for (let resolver of document.querySelectorAll('.mirrors span')) { var link = resolver.getAttribute('data-link').replace('tape.com', 'ta.pe'); if (!link.includes('https:')) { link = 'https:' + link; } output.push(new NeedsResolver('', new ModuleRequest(link, 'get', emptyKeyValue, null))); } const guardahd = document.querySelector('.guardahd-player'); if (guardahd != null) { nextRequest = guardahd.querySelector('iframe').src; }} else { for (let resolver of document.querySelectorAll(`[title=\"${decodeURI(parsedJson.request.url.split('?ep=')[1])}\"] a`)) { var link = resolver.getAttribute('data-link'); link = link == null ? resolver.href:link; output.push(new NeedsResolver('', new ModuleRequest(link.replace('tape.com', 'ta.pe'), 'get', emptyKeyValue, null))); }}const episodesPageObject = new Chapters(new ModuleRequest(nextRequest, 'get', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output( new Videos(output, null), null, null));savedData.innerHTML = JSON.stringify(episodesPageObject);"
      },
      "output": {
        "videos": {
          "needsResolver": [],
          "rawVideo": []
        },
        "images": [],
        "text": { "text": "" }
      }
    },{
      "request": {
        "url": "",
        "method": "get",
        "headers": [],
        "httpBody": null
      },
      "extra": {
        "commands": [],
        "extraInfo": []
      },
      "javascriptConfig": {
        "removeJavascript": true,
        "loadInWebView": false,
        "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text;} function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;} var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('', '')];var output = parsedJson.output.videos.needsResolver;var embeds = document.querySelectorAll('._player-mirrors li');for (let embed of embeds) { var link = embed.getAttribute('data-link').replace('tape.com', 'ta.pe'); if (!link.includes('https:')) { link = 'https:' + link; } output.push(new NeedsResolver('', new ModuleRequest(link, 'get', emptyKeyValue, null)));}const embedsPageObject = new Chapters(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output( new Videos(output, null), null, null));savedData.innerHTML = JSON.stringify(embedsPageObject);"
      },
      "output": {
        "videos": {
          "needsResolver": [],
          "rawVideo": [{
            "video": [{
              "videoQuality": "",
              "videoLink": {
                "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                "method": "get",
                "headers": [],
                "httpBody": null
              }
            }]
          }]
        },
        "images": [],
        "text": { "text": "" }
      }
    }
  ],
  "moduleResolvers": [
    {
      "resolverInfo": {
        "resolverName": "STREAMTA",
        "nameMatches": [ "STREAMTA" ],
        "developer": "ナビル",
        "moduleID": "8465132120",
        "resolverVersion": 1.6,
        "baseURL": ""
      },
      "resolver": [ {
        "request": {
          "url": "empty",
          "method": "get",
          "headers": [],
          "httpBody": null
        },
        "extra": {
          "commands": [],
          "extraInfo": []
        },
        "javascriptConfig": {
          "removeJavascript": true,
          "loadInWebView": false,
          "javaScript": "function Resolver(request, extra, javascriptConfig, output) {this.request = request;this.extra = extra;this.javascriptConfig = javascriptConfig;this.output = output;}function ModuleRequest(url, method, headers, httpBody) {this.url = url;this.method = method;this.headers = headers;this.httpBody = httpBody;}function Extra(commands, extraInfo) {this.commands = commands;this.extraInfo = extraInfo;}function Commands(commandName, params) {this.commandName = commandName;this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) {this.removeJavascript = removeJavascript;this.loadInWebView = loadInWebView;this.javaScript = javaScript;}function KeyValue(key, value) {this.key = key;this.value = value;}function Output(video) {this.video = video;}function Video(videoQuality, videoLink) {this.videoQuality = videoQuality;this.videoLink = videoLink;}function getNext(match, array) {for(var x = 0; x < array.length; x++) {let mMatch = array[x];if(mMatch.includes(match)) {return array[x + 1];}}}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var videos = [];let playerRegex = /innerHTML\\s=\\s*\"([^\"]+)\"\\s?\\+\\s?''\\+\\s?\\('([^']+)/;let body = document.body.innerText;let playerMatch = playerRegex.exec(body);if (playerMatch) { let matchedLink = playerMatch[2]; let index = matchedLink.indexOf('?');if (index == -1){try{firstpart = playerMatch[1].split('=')[1].replace('\"','');secondpart = playerMatch[2].substr(5);secondtry = playerMatch[2].substr(4);let videoLink = 'https://streamta.pe/get_video?id=' + firstpart + secondpart + '&stream=1';let fixedLink = 'https://streamta.pe/get_video?id=' + firstpart + secondtry + '&stream=1';console.log(videoLink,fixedLink);videos.push(new Video('THAI GUY WAS HERE', new ModuleRequest(fixedLink, 'get', emptyKeyValue, null)));videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}catch(e){}try{if (matchedLink.match(/^=/)){let videoLink = 'https://streamta.pe/get_video?id=' + matchedLink.substr(5) + '&stream=1';if (videoLink.includes('id==')) {videoLink = videoLink.replace('id==', 'id='); }console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}catch(e){}try{ if(matchedLink.match(/id=/)) { split = matchedLink.split('id='); let videoLink = 'https://streamta.pe/get_video?id=' + split[1] + '&stream=1'; console.log(videoLink); videos.push(new Video('Normal', new ModuleRequest(videoLink, 'get', emptyKeyValue, null))); } }catch(e){}try{if (matchedLink.match(/^([a-zA-Z]+d=)/)){split = matchedLink.split('d=');let videoLink = 'https://streamta.pe/get_video?id=' + split[1] + '&stream=1';console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}catch(e){}}else{let videoLink = `https://streamta.pe/get_video${matchedLink.substr(index)}&stream=1`;console.log(videoLink);videos.push(new Video('Normal',new ModuleRequest(videoLink,'get',emptyKeyValue,null)));}}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
          "moduleID": "234234823",
          "video": [ {
            "videoQuality": "720",
            "videoLink": {
              "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
              "method": "get",
              "headers": [],
              "httpBody": null
            }
          } ]
        }
      } ]
    },{
      "resolverInfo": {
        "resolverName": "EVOLOAD",
        "nameMatches": [ "EVOLOAD" ],
        "developer": "ナビル",
        "moduleID": "230076042410",
        "resolverVersion": 1.00,
        "baseURL": "evoload.io"
      },
      "resolver": [
        {
          "request": {
            "url": "empty",
            "method": "get",
            "headers": [],
            "httpBody": null
          },
          "extra": {
            "commands": [],
            "extraInfo": []
          },
          "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "function Resolver(request, extra, javascriptConfig, output) {this.request = request;this.extra = extra;this.javascriptConfig = javascriptConfig;this.output = output;}function ModuleRequest(url, method, headers, httpBody) {this.url = url;this.method = method;this.headers = headers;this.httpBody = httpBody;}function Extra(commands, extraInfo) {this.commands = commands;this.extraInfo = extraInfo;}function Commands(commandName, params) {this.commandName = commandName;this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) {this.removeJavascript = removeJavascript;this.loadInWebView = loadInWebView;this.javaScript = javaScript;}function KeyValue(key, value) {this.key = key;this.value = value;}function Output(video) {this.video = video;}function Video(videoQuality, videoLink) {this.videoQuality = videoQuality;this.videoLink = videoLink;}function getNext(match, array) {for (var x = 0; x < array.length; x++) {let mMatch = array[x];if (mMatch.includes(match)) {return array[x + 1];}}}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var videos = [];var id = document.getElementById('captcha_pass').getAttribute('value');var nextRequest = `https://csrv.evosrv.com/captcha?${id}`;let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest(nextRequest, 'get', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
          },
          "output": { "video": [] }
        },{
          "request": {
            "url": "",
            "method": "get",
            "headers": [],
            "httpBody": null
          },
          "extra": {
            "commands": [],
            "extraInfo": []
          },
          "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)]; var videos = []; var csrv = document.querySelector('script').innerText.replace('*/', '').replace('/*', '').trim(); var formdata = { 'code': parsedJson.request.headers[0].value.split('/')[4], 'csrv_token' : csrv, 'pass': parsedJson.request.url.split('?')[1], 'token': 'ok' }; var body = 'code=' + formdata.code + '&csrv_token=' + formdata.csrv_token + '&pass=' + formdata.pass + '&token=' + formdata.token; let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Resolver(new ModuleRequest('https://evoload.io/SecurePlayer', 'post', emptyKeyValue, body), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;"
          },
          "output": { "video": [] }
        }, {
          "request": {
            "url": "",
            "method": "get",
            "headers": [],
            "httpBody": null
          },
          "extra": {
            "commands": [],
            "extraInfo": []
          },
          "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)]; var videos = []; var script = document.querySelector('script').innerText.replace('*/', '').replace('/*', '').trim(); var json = JSON.parse(script); videos.push(new Video('Normal',new ModuleRequest(json.stream.src,'get',emptyKeyValue,null)));; let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Resolver(new ModuleRequest('', 'POST', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;"
          },
          "output": {
            "video": [
              {
                "videoQuality": "720",
                "videoLink": {
                  "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                  "method": "get",
                  "headers": [],
                  "httpBody": null
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "responseCodeFunctions": [],
  "helperFunctions": []
}